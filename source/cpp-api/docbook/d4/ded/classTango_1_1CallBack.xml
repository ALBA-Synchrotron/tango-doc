<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="d4/ded/classTango_1_1CallBack">
<title>Tango::CallBack class Reference</title>
        <simplesect>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="dd/de7/classTango_1_1CallBack_1_1CallBackExt">Tango::CallBack::CallBackExt</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>CallBackExt * ext</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="d4/ded/classTango_1_1CallBack_1a47a4fc0fca26863bd7b31e6f1e978f72">attr_read</link> (
<link linkend="dc/d42/classTango_1_1AttrReadEvent">AttrReadEvent</link> * are)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="d4/ded/classTango_1_1CallBack_1a352e653238bb6ecb134fa36d4adb44bc">attr_written</link> (
<link linkend="da/d7f/classTango_1_1AttrWrittenEvent">AttrWrittenEvent</link> * awe)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="d4/ded/classTango_1_1CallBack_1a9a39818975ee8f46755209a62ffed5f7">cmd_ended</link> (
<link linkend="dc/d43/classTango_1_1CmdDoneEvent">CmdDoneEvent</link> * cde)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="d4/ded/classTango_1_1CallBack_1a6a794901a14f08b1cda918e1d18acce9">push_event</link> (
<link linkend="d7/d5f/classTango_1_1EventData">EventData</link> * ed)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="d4/ded/classTango_1_1CallBack_1a5d1dc656f3a7f50df6860f01fac4f32e">push_event</link> (
<link linkend="d9/da1/classTango_1_1AttrConfEventData">AttrConfEventData</link> * ace)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="d4/ded/classTango_1_1CallBack_1abab8a359a1e492e12a21b3dab7b93501">push_event</link> (
<link linkend="df/d39/classTango_1_1DataReadyEventData">DataReadyEventData</link> * dre)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="d4/ded/classTango_1_1CallBack_1acf0ff8451e6fd851f8724237d4fad4a8">push_event</link> (
<link linkend="db/d47/classTango_1_1DevIntrChangeEventData">DevIntrChangeEventData</link> * dic)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="d4/ded/classTango_1_1CallBack_1aac4aa49f209d8db18ce415f2a1a5d13d">push_event</link> (
<link linkend="d8/d0d/classTango_1_1PipeEventData">PipeEventData</link> * ped)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="d4/ded/classTango_1_1CallBack_1a976a34a2581d81db52965b6c05fc202e">~CallBack</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Brief Description</title>

<para>Event and asynchronous (callback model) calls base class. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>When using the event push model (callback automatically executed), there are some cases (same callback used for events coming from different devices hosted in device server process running on different hosts) where the callback method could be executed concurently by different threads started by the ORB. The user has to code his callback method in a thread safe manner.</para>

<para>$Author$ $Revision$ </para>
                <para>Definition at line 235 of file devasyn.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>devasyn.h</para></listitem></itemizedlist></para>
        </simplesect>
            <section xml:id="d4/ded/classTango_1_1CallBack_1a47a4fc0fca26863bd7b31e6f1e978f72">
                <title>virtual void Tango::CallBack::attr_read (AttrReadEvent *are)</title> <emphasis>Asynchronous read attribute execution callback method.</emphasis>
                
<para>This method is defined as being empty and must be overloaded by the user when the asynchronous callback model is used. This is the method which will be executed when the server reply from a read_attribute(s) is received in both push and pull sub-mode.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>are</entry>
                                <entry>
<para>The read attribute data </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="d4/ded/classTango_1_1CallBack_1a352e653238bb6ecb134fa36d4adb44bc">
                <title>virtual void Tango::CallBack::attr_written (AttrWrittenEvent *awe)</title> <emphasis>Asynchronous write attribute execution callback method.</emphasis>
                
<para>This method is defined as being empty and must be overloaded by the user when the asynchronous callback model is used. This is the method which will be executed when the server reply from a write_attribute(s) is received in both push and pull sub-mode.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>awe</entry>
                                <entry>
<para>The write attribute data </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="d4/ded/classTango_1_1CallBack_1a9a39818975ee8f46755209a62ffed5f7">
                <title>virtual void Tango::CallBack::cmd_ended (CmdDoneEvent *cde)</title> <emphasis>Asynchronous command execution callback method.</emphasis>
                
<para>This method is defined as being empty and must be overloaded by the user when the asynchronous callback model is used. This is the method which will be executed when the server reply from a command_inout is received in both push and pull sub-mode.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>cde</entry>
                                <entry>
<para>The command data </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="d4/ded/classTango_1_1CallBack_1a6a794901a14f08b1cda918e1d18acce9">
                <title>virtual void Tango::CallBack::push_event (EventData *ed)</title> <emphasis>Event callback method.</emphasis>
                
<para>This method is defined as being empty and must be overloaded by the user when events are used. This is the method which will be executed when the server send event(s) to the client.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>ed</entry>
                                <entry>
<para>The event data </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="d4/ded/classTango_1_1CallBack_1a5d1dc656f3a7f50df6860f01fac4f32e">
                <title>virtual void Tango::CallBack::push_event (AttrConfEventData *ace)</title> <emphasis>attribute configuration change event callback method</emphasis>
                
<para>This method is defined as being empty and must be overloaded by the user when events are used. This is the method which will be executed when the server send attribute configuration change event(s) to the client.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>ace</entry>
                                <entry>
<para>The attribute configuration change event data </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="d4/ded/classTango_1_1CallBack_1abab8a359a1e492e12a21b3dab7b93501">
                <title>virtual void Tango::CallBack::push_event (DataReadyEventData *dre)</title> <emphasis>Data ready event callback method.</emphasis>
                
<para>This method is defined as being empty and must be overloaded by the user when events are used. This is the method which will be executed when the server send attribute data ready event(s) to the client.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>dre</entry>
                                <entry>
<para>The data ready event data </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="d4/ded/classTango_1_1CallBack_1acf0ff8451e6fd851f8724237d4fad4a8">
                <title>virtual void Tango::CallBack::push_event (DevIntrChangeEventData *dic)</title> <emphasis>Device interface change event callback method.</emphasis>
                
<para>This method is defined as being empty and must be overloaded by the user when events are used. This is the method which will be executed when the server send device interface change event(s) to the client.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>dic</entry>
                                <entry>
<para>The device interface change event data </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="d4/ded/classTango_1_1CallBack_1aac4aa49f209d8db18ce415f2a1a5d13d">
                <title>virtual void Tango::CallBack::push_event (PipeEventData *ped)</title> <emphasis>Pipe event callback method.</emphasis>
                
<para>This method is defined as being empty and must be overloaded by the user when events are used. This is the method which will be executed when the server send pipe event(s) to the client.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>ped</entry>
                                <entry>
<para>The pipe event data </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="d4/ded/classTango_1_1CallBack_1a976a34a2581d81db52965b6c05fc202e">
                <title>virtual Tango::CallBack::~CallBack ()</title> <emphasis></emphasis>
                
            </section>
</section>
