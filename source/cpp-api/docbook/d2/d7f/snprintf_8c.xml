<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="d2/d7f/snprintf_8c">
    <title>snprintf.c File Reference</title>
    <programlisting>#include &lt;sys/types.h&gt;</programlisting>
    <programlisting>#include &lt;string.h&gt;</programlisting>
    <programlisting>#include &lt;stdlib.h&gt;</programlisting>
    <programlisting>#include &lt;stdio.h&gt;</programlisting>
    <programlisting>#include &lt;stdarg.h&gt;</programlisting>
    <programlisting>#include &lt;assert.h&gt;</programlisting>
    <programlisting>#include &lt;errno.h&gt;</programlisting>
        <simplesect>
            <title>Defines</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d2/d7f/snprintf_8c_1a92682423eb7bc3233c440b67a429b870">breakeven_point</link> 6	/* some reasonable one-size-fits-all value */</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d2/d7f/snprintf_8c_1abdd8c3490d94c83fb3866e0e9139db38">fast_memcpy</link> { register size_t nn = (size_t)(n); \
    if (nn &gt;= <link linkend="d2/d7f/snprintf_8c_1a92682423eb7bc3233c440b67a429b870">breakeven_point</link>) memcpy((d), (s), nn); \
    else if (nn &gt; 0) { /* proc call overhead is worth only for large strings*/\
      register char *dd; register const char *ss; \
      for (ss=(s), dd=(d); nn&gt;0; nn--) *dd++ = *ss++; } }</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d2/d7f/snprintf_8c_1ad448207baaebdf239f9a6eefc806201e">fast_memset</link> { register size_t nn = (size_t)(n); \
    if (nn &gt;= <link linkend="d2/d7f/snprintf_8c_1a92682423eb7bc3233c440b67a429b870">breakeven_point</link>) memset((d), (int)(c), nn); \
    else if (nn &gt; 0) { /* proc call overhead is worth only for large strings*/\
      register char *dd; register const int cc=(int)(c); \
      for (dd=(d); nn&gt;0; nn--) *dd++ = cc; } }</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d2/d7f/snprintf_8c_1a80e33e966a7ec3facaf0b2b4afaf5be5">isdigit</link> ((c) &gt;= &apos;0&apos; &amp;&amp; (c) &lt;= &apos;9&apos;)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d2/d7f/snprintf_8c_1a93ff4ec8efd9a3f9abfcf127fa408a0a">portable_snprintf</link> snprintf</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d2/d7f/snprintf_8c_1ae7b63d1b04b47a62e0168225e000824c">PORTABLE_SNPRINTF_VERSION_MAJOR</link> 2</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d2/d7f/snprintf_8c_1a076d04c914732567f8300676b32c3b08">PORTABLE_SNPRINTF_VERSION_MINOR</link> 2</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05">portable_vsnprintf</link> vsnprintf</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title>Variables</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static char <link linkend="d2/d7f/snprintf_8c_1aedd6595d1b48e0c33c0a81d20b412aff">credits</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d2/d7f/snprintf_8c_1ae5dc736201ed48de501c7491e23719e5">portable_snprintf</link> (
char * str, size_t str_m, const char * fmt, ... )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d2/d7f/snprintf_8c_1aa73a3dcaf1ccfeaecc146df5ebeb8b0a">portable_vsnprintf</link> (
char * str, size_t str_m, const char * fmt, va_list ap)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/tango/workspace/cppTango/src/log4tango/snprintf.c</para>
    </simplesect>
</section>
