<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="d2/d7f/snprintf_8c" kind="file">
    <compoundname>snprintf.c</compoundname>
    <includes local="no">sys/types.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">errno.h</includes>
    <includedby refid="da/dfc/StringUtil_8cpp" local="yes">StringUtil.cpp</includedby>
    <incdepgraph>
      <node id="2282">
        <label>stdarg.h</label>
      </node>
      <node id="2283">
        <label>assert.h</label>
      </node>
      <node id="2280">
        <label>stdlib.h</label>
      </node>
      <node id="2284">
        <label>errno.h</label>
      </node>
      <node id="2278">
        <label>sys/types.h</label>
      </node>
      <node id="2279">
        <label>string.h</label>
      </node>
      <node id="2277">
        <label>snprintf.c</label>
        <link refid="snprintf.c"/>
        <childnode refid="2278" relation="include">
        </childnode>
        <childnode refid="2279" relation="include">
        </childnode>
        <childnode refid="2280" relation="include">
        </childnode>
        <childnode refid="2281" relation="include">
        </childnode>
        <childnode refid="2282" relation="include">
        </childnode>
        <childnode refid="2283" relation="include">
        </childnode>
        <childnode refid="2284" relation="include">
        </childnode>
      </node>
      <node id="2281">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2286">
        <label>StringUtil.cpp</label>
        <link refid="da/dfc/StringUtil_8cpp"/>
      </node>
      <node id="2285">
        <label>snprintf.c</label>
        <link refid="snprintf.c"/>
        <childnode refid="2286" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="d2/d7f/snprintf_8c_1a92682423eb7bc3233c440b67a429b870" prot="public" static="no">
        <name>breakeven_point</name>
        <initializer>6	/* some reasonable one-size-fits-all value */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" line="368" column="11" bodyfile="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/d7f/snprintf_8c_1abdd8c3490d94c83fb3866e0e9139db38" prot="public" static="no">
        <name>fast_memcpy</name>
        <param><defname>d</defname></param>
        <param><defname>s</defname></param>
        <param><defname>n</defname></param>
        <initializer>{ register size_t nn = (size_t)(n); \
    if (nn &gt;= <ref refid="d2/d7f/snprintf_8c_1a92682423eb7bc3233c440b67a429b870" kindref="member">breakeven_point</ref>) memcpy((d), (s), nn); \
    else if (nn &gt; 0) { /* proc call overhead is worth only for large strings*/\
      register char *dd; register const char *ss; \
      for (ss=(s), dd=(d); nn&gt;0; nn--) *dd++ = *ss++; } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" line="371" column="9" bodyfile="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" bodystart="371" bodyend="-1"/>
        <referencedby refid="d2/d7f/snprintf_8c_1aa73a3dcaf1ccfeaecc146df5ebeb8b0a" compoundref="d2/d7f/snprintf_8c" startline="546" endline="1032">portable_vsnprintf</referencedby>
      </memberdef>
      <memberdef kind="define" id="d2/d7f/snprintf_8c_1ad448207baaebdf239f9a6eefc806201e" prot="public" static="no">
        <name>fast_memset</name>
        <param><defname>d</defname></param>
        <param><defname>c</defname></param>
        <param><defname>n</defname></param>
        <initializer>{ register size_t nn = (size_t)(n); \
    if (nn &gt;= <ref refid="d2/d7f/snprintf_8c_1a92682423eb7bc3233c440b67a429b870" kindref="member">breakeven_point</ref>) memset((d), (int)(c), nn); \
    else if (nn &gt; 0) { /* proc call overhead is worth only for large strings*/\
      register char *dd; register const int cc=(int)(c); \
      for (dd=(d); nn&gt;0; nn--) *dd++ = cc; } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" line="378" column="9" bodyfile="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" bodystart="378" bodyend="-1"/>
        <referencedby refid="d2/d7f/snprintf_8c_1aa73a3dcaf1ccfeaecc146df5ebeb8b0a" compoundref="d2/d7f/snprintf_8c" startline="546" endline="1032">portable_vsnprintf</referencedby>
      </memberdef>
      <memberdef kind="define" id="d2/d7f/snprintf_8c_1a80e33e966a7ec3facaf0b2b4afaf5be5" prot="public" static="no">
        <name>isdigit</name>
        <param><defname>c</defname></param>
        <initializer>((c) &gt;= &apos;0&apos; &amp;&amp; (c) &lt;= &apos;9&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" line="338" column="10" bodyfile="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" bodystart="338" bodyend="-1"/>
        <referencedby refid="d2/d7f/snprintf_8c_1aa73a3dcaf1ccfeaecc146df5ebeb8b0a" compoundref="d2/d7f/snprintf_8c" startline="546" endline="1032">portable_vsnprintf</referencedby>
      </memberdef>
      <memberdef kind="define" id="d2/d7f/snprintf_8c_1a93ff4ec8efd9a3f9abfcf127fa408a0a" prot="public" static="no">
        <name>portable_snprintf</name>
        <initializer>snprintf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" line="405" column="9" bodyfile="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/d7f/snprintf_8c_1ae7b63d1b04b47a62e0168225e000824c" prot="public" static="no">
        <name>PORTABLE_SNPRINTF_VERSION_MAJOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" line="295" column="9" bodyfile="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/d7f/snprintf_8c_1a076d04c914732567f8300676b32c3b08" prot="public" static="no">
        <name>PORTABLE_SNPRINTF_VERSION_MINOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" line="296" column="9" bodyfile="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" prot="public" static="no">
        <name>portable_vsnprintf</name>
        <initializer>vsnprintf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" line="407" column="9" bodyfile="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" bodystart="407" bodyend="-1"/>
        <referencedby refid="d2/d7f/snprintf_8c_1ae5dc736201ed48de501c7491e23719e5" compoundref="d2/d7f/snprintf_8c" startline="532" endline="540">portable_snprintf</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d2/d7f/snprintf_8c_1aedd6595d1b48e0c33c0a81d20b412aff" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char credits[]</definition>
        <argsstring>[]</argsstring>
        <name>credits</name>
        <initializer>= &quot;\n\
@(#)snprintf.c, v2.2: Mark Martinec, &lt;mark.martinec@ijs.si&gt;\n\
@(#)snprintf.c, v2.2: Copyright 1999, Mark Martinec. Frontier Artistic License applies.\n\
@(#)snprintf.c, v2.2: http://www.ijs.si/software/snprintf/\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" line="420" column="1" bodyfile="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" bodystart="420" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d2/d7f/snprintf_8c_1ae5dc736201ed48de501c7491e23719e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int portable_snprintf</definition>
        <argsstring>(char *str, size_t str_m, const char *fmt,...)</argsstring>
        <name>portable_snprintf</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>str_m</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" line="412" column="1" bodyfile="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" bodystart="532" bodyend="540"/>
        <references refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" compoundref="d2/d7f/snprintf_8c" startline="407">portable_vsnprintf</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7f/snprintf_8c_1aa73a3dcaf1ccfeaecc146df5ebeb8b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int portable_vsnprintf</definition>
        <argsstring>(char *str, size_t str_m, const char *fmt, va_list ap)</argsstring>
        <name>portable_vsnprintf</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>str_m</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" line="414" column="1" bodyfile="/home/tango/workspace/cppTango/src/log4tango/snprintf.c" bodystart="546" bodyend="1032"/>
        <references refid="d2/d7f/snprintf_8c_1abdd8c3490d94c83fb3866e0e9139db38" compoundref="d2/d7f/snprintf_8c" startline="371">fast_memcpy</references>
        <references refid="d2/d7f/snprintf_8c_1ad448207baaebdf239f9a6eefc806201e" compoundref="d2/d7f/snprintf_8c" startline="378">fast_memset</references>
        <references refid="d2/d7f/snprintf_8c_1a80e33e966a7ec3facaf0b2b4afaf5be5" compoundref="d2/d7f/snprintf_8c" startline="338">isdigit</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>snprintf.c<sp/>-<sp/>a<sp/>portable<sp/>implementation<sp/>of<sp/>snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AUTHOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Mark<sp/>Martinec<sp/>&lt;mark.martinec@ijs.si&gt;,<sp/>April<sp/>1999.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>:<sp/><sp/>2000<sp/>-<sp/>2002</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LifeLine<sp/>Networks<sp/>BV<sp/>(www.lifeline.nl).<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bastiaan<sp/>Bakker.<sp/>All<sp/>rights<sp/>reserved.<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2004,2005,2006,2007,2008,2009,2010,2011,2012</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Synchrotron<sp/>SOLEIL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L&apos;Orme<sp/>des<sp/>Merisiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Saint-Aubin<sp/>-<sp/>BP<sp/>48<sp/>-<sp/>France</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>log4tango.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Log4ango<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Log4tango<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>Log4Tango.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>FEATURES</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>-<sp/>careful<sp/>adherence<sp/>to<sp/>specs<sp/>regarding<sp/>flags,<sp/>field<sp/>width<sp/>and<sp/>precision;</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>-<sp/>good<sp/>performance<sp/>for<sp/>large<sp/>string<sp/>handling<sp/>(large<sp/>format,<sp/>large</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/>argument<sp/>or<sp/>large<sp/>paddings).<sp/>Performance<sp/>is<sp/>similar<sp/>to<sp/>system&apos;s<sp/>sprintf</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/>and<sp/>in<sp/>several<sp/>cases<sp/>significantly<sp/>better<sp/>(make<sp/>sure<sp/>you<sp/>compile<sp/>with</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/>optimizations<sp/>turned<sp/>on,<sp/>tell<sp/>the<sp/>compiler<sp/>the<sp/>code<sp/>is<sp/>strict<sp/>ANSI</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/><sp/>if<sp/>necessary<sp/>to<sp/>give<sp/>it<sp/>more<sp/>freedom<sp/>for<sp/>optimizations);</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>-<sp/>return<sp/>value<sp/>semantics<sp/>per<sp/>ISO/IEC<sp/>9899:1999<sp/>(&quot;ISO<sp/>C99&quot;);</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>-<sp/>written<sp/>in<sp/>standard<sp/>ISO/ANSI<sp/>C<sp/>-<sp/>requires<sp/>an<sp/>ANSI<sp/>C<sp/>compiler.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>SUPPORTED<sp/>CONVERSION<sp/>SPECIFIERS<sp/>AND<sp/>DATA<sp/>TYPES</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>This<sp/>snprintf<sp/>only<sp/>supports<sp/>the<sp/>following<sp/>conversion<sp/>specifiers:</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>s,<sp/>c,<sp/>d,<sp/>u,<sp/>o,<sp/>x,<sp/>X,<sp/>p<sp/><sp/>(and<sp/>synonyms:<sp/>i,<sp/>D,<sp/>U,<sp/>O<sp/>-<sp/>see<sp/>below)</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>with<sp/>flags:<sp/>&apos;-&apos;,<sp/>&apos;+&apos;,<sp/>&apos;<sp/>&apos;,<sp/>&apos;0&apos;<sp/>and<sp/>&apos;#&apos;.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>An<sp/>asterisk<sp/>is<sp/>supported<sp/>for<sp/>field<sp/>width<sp/>as<sp/>well<sp/>as<sp/>precision.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>Length<sp/>modifiers<sp/>&apos;h&apos;<sp/>(short<sp/>int),<sp/>&apos;l&apos;<sp/>(long<sp/>int),</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>and<sp/>&apos;ll&apos;<sp/>(long<sp/>long<sp/>int)<sp/>are<sp/>supported.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>NOTE:</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/>If<sp/>macro<sp/>SNPRINTF_LONGLONG_SUPPORT<sp/>is<sp/>not<sp/>defined<sp/>(default)<sp/>the</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/><sp/>length<sp/>modifier<sp/>&apos;ll&apos;<sp/>is<sp/>recognized<sp/>but<sp/>treated<sp/>the<sp/>same<sp/>as<sp/>&apos;l&apos;,</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/>which<sp/>may<sp/>cause<sp/>argument<sp/>value<sp/>truncation!<sp/>Defining</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/>SNPRINTF_LONGLONG_SUPPORT<sp/>requires<sp/>that<sp/>your<sp/>system&apos;s<sp/>sprintf<sp/>also</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/>handles<sp/>length<sp/>modifier<sp/>&apos;ll&apos;.<sp/><sp/>long<sp/>long<sp/>int<sp/>is<sp/>a<sp/>language<sp/>extension</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/>which<sp/>may<sp/>not<sp/>be<sp/>portable.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>Conversion<sp/>of<sp/>numeric<sp/>data<sp/>(conversion<sp/>specifiers<sp/>d,<sp/>u,<sp/>o,<sp/>x,<sp/>X,<sp/>p)</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>with<sp/>length<sp/>modifiers<sp/>(none<sp/>or<sp/>h,<sp/>l,<sp/>ll)<sp/>is<sp/>left<sp/>to<sp/>the<sp/>system<sp/>routine</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>sprintf,<sp/>but<sp/>all<sp/>handling<sp/>of<sp/>flags,<sp/>field<sp/>width<sp/>and<sp/>precision<sp/>as<sp/>well<sp/>as</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>c<sp/>and<sp/>s<sp/>conversions<sp/>is<sp/>done<sp/>very<sp/>carefully<sp/>by<sp/>this<sp/>portable<sp/>routine.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>If<sp/>a<sp/>string<sp/>precision<sp/>(truncation)<sp/>is<sp/>specified<sp/>(e.g.<sp/>%.8s)<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>guaranteed<sp/>the<sp/>string<sp/>beyond<sp/>the<sp/>specified<sp/>precision<sp/>will<sp/>not<sp/>be<sp/>referenced.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>Length<sp/>modifiers<sp/>h,<sp/>l<sp/>and<sp/>ll<sp/>are<sp/>ignored<sp/>for<sp/>c<sp/>and<sp/>s<sp/>conversions<sp/>(data</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>types<sp/>wint_t<sp/>and<sp/>wchar_t<sp/>are<sp/>not<sp/>supported).</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>common<sp/>synonyms<sp/>for<sp/>conversion<sp/>characters<sp/>are<sp/>supported:</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>i<sp/>is<sp/>a<sp/>synonym<sp/>for<sp/>d</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>D<sp/>is<sp/>a<sp/>synonym<sp/>for<sp/>ld,<sp/>explicit<sp/>length<sp/>modifiers<sp/>are<sp/>ignored</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>U<sp/>is<sp/>a<sp/>synonym<sp/>for<sp/>lu,<sp/>explicit<sp/>length<sp/>modifiers<sp/>are<sp/>ignored</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>O<sp/>is<sp/>a<sp/>synonym<sp/>for<sp/>lo,<sp/>explicit<sp/>length<sp/>modifiers<sp/>are<sp/>ignored</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>The<sp/>D,<sp/>O<sp/>and<sp/>U<sp/>conversion<sp/>characters<sp/>are<sp/>nonstandard,<sp/>they<sp/>are<sp/>supported</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>for<sp/>backward<sp/>compatibility<sp/>only,<sp/>and<sp/>should<sp/>not<sp/>be<sp/>used<sp/>for<sp/>new<sp/>code.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>is<sp/>specifically<sp/>NOT<sp/>supported:</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>flag<sp/>&apos;<sp/>(thousands&apos;<sp/>grouping<sp/>character)<sp/>is<sp/>recognized<sp/>but<sp/>ignored</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>numeric<sp/>conversion<sp/>specifiers:<sp/>f,<sp/>e,<sp/>E,<sp/>g,<sp/>G<sp/>and<sp/>synonym<sp/>F,</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>as<sp/>well<sp/>as<sp/>the<sp/>new<sp/>a<sp/>and<sp/>A<sp/>conversion<sp/>specifiers</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>length<sp/>modifier<sp/>&apos;L&apos;<sp/>(long<sp/>double)<sp/>and<sp/>&apos;q&apos;<sp/>(quad<sp/>-<sp/>use<sp/>&apos;ll&apos;<sp/>instead)</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>wide<sp/>character/string<sp/>conversions:<sp/>lc,<sp/>ls,<sp/>and<sp/>nonstandard</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>synonyms<sp/>C<sp/>and<sp/>S</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>writeback<sp/>of<sp/>converted<sp/>string<sp/>length:<sp/>conversion<sp/>character<sp/>n</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>the<sp/>n$<sp/>specification<sp/>for<sp/>direct<sp/>reference<sp/>to<sp/>n-th<sp/>argument</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>locales</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>permitted<sp/>for<sp/>str_m<sp/>to<sp/>be<sp/>zero,<sp/>and<sp/>it<sp/>is<sp/>permitted<sp/>to<sp/>specify<sp/>NULL</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>pointer<sp/>for<sp/>resulting<sp/>string<sp/>argument<sp/>if<sp/>str_m<sp/>is<sp/>zero<sp/>(as<sp/>per<sp/>ISO<sp/>C99).</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>number<sp/>of<sp/>characters<sp/>which<sp/>would<sp/>be<sp/>generated</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>for<sp/>the<sp/>given<sp/>input,<sp/>excluding<sp/>the<sp/>trailing<sp/>null.<sp/>If<sp/>this<sp/>value</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>is<sp/>greater<sp/>or<sp/>equal<sp/>to<sp/>str_m,<sp/>not<sp/>all<sp/>characters<sp/>from<sp/>the<sp/>result</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>have<sp/>been<sp/>stored<sp/>in<sp/>str,<sp/>output<sp/>bytes<sp/>beyond<sp/>the<sp/>(str_m-1)<sp/>-th<sp/>character</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>are<sp/>discarded.<sp/>If<sp/>str_m<sp/>is<sp/>greater<sp/>than<sp/>zero<sp/>it<sp/>is<sp/>guaranteed</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>the<sp/>resulting<sp/>string<sp/>will<sp/>be<sp/>null-terminated.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>NOTE<sp/>that<sp/>this<sp/>matches<sp/>the<sp/>ISO<sp/>C99,<sp/>OpenBSD,<sp/>and<sp/>GNU<sp/>C<sp/>library<sp/>2.1,</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>but<sp/>is<sp/>different<sp/>from<sp/>some<sp/>older<sp/>and<sp/>vendor<sp/>implementations,</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>and<sp/>is<sp/>also<sp/>different<sp/>from<sp/>XPG,<sp/>XSH5,<sp/>SUSv2<sp/>specifications.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>For<sp/>historical<sp/>discussion<sp/>on<sp/>changes<sp/>in<sp/>the<sp/>semantics<sp/>and<sp/>standards</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>of<sp/>snprintf<sp/>see<sp/>printf(3)<sp/>man<sp/>page<sp/>in<sp/>the<sp/>Linux<sp/>programmers<sp/>manual.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>Routines<sp/>asprintf<sp/>and<sp/>vasprintf<sp/>return<sp/>a<sp/>pointer<sp/>(in<sp/>the<sp/>ptr<sp/>argument)</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>to<sp/>a<sp/>buffer<sp/>sufficiently<sp/>large<sp/>to<sp/>hold<sp/>the<sp/>resulting<sp/>string.<sp/>This<sp/>pointer</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>should<sp/>be<sp/>passed<sp/>to<sp/>free(3)<sp/>to<sp/>release<sp/>the<sp/>allocated<sp/>storage<sp/>when<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>no<sp/>longer<sp/>needed.<sp/>If<sp/>sufficient<sp/>space<sp/>cannot<sp/>be<sp/>allocated,<sp/>these<sp/>functions</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>will<sp/>return<sp/>-1<sp/>and<sp/>set<sp/>ptr<sp/>to<sp/>be<sp/>a<sp/>NULL<sp/>pointer.<sp/>These<sp/>two<sp/>routines<sp/>are<sp/>a</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>GNU<sp/>C<sp/>library<sp/>extensions<sp/>(glibc).</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>Routines<sp/>asnprintf<sp/>and<sp/>vasnprintf<sp/>are<sp/>similar<sp/>to<sp/>asprintf<sp/>and<sp/>vasprintf,</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>yet,<sp/>like<sp/>snprintf<sp/>and<sp/>vsnprintf<sp/>counterparts,<sp/>will<sp/>write<sp/>at<sp/>most<sp/>str_m-1</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>characters<sp/>into<sp/>the<sp/>allocated<sp/>output<sp/>string,<sp/>the<sp/>last<sp/>character<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>allocated<sp/>buffer<sp/>then<sp/>gets<sp/>the<sp/>terminating<sp/>null.<sp/>If<sp/>the<sp/>formatted<sp/>string</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>length<sp/>(the<sp/>return<sp/>value)<sp/>is<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>str_m<sp/>argument,</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>the<sp/>resulting<sp/>string<sp/>was<sp/>truncated<sp/>and<sp/>some<sp/>of<sp/>the<sp/>formatted<sp/>characters</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>were<sp/>discarded.<sp/>These<sp/>routines<sp/>present<sp/>a<sp/>handy<sp/>way<sp/>to<sp/>limit<sp/>the<sp/>amount</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>of<sp/>allocated<sp/>memory<sp/>to<sp/>some<sp/>sane<sp/>value.</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>AVAILABILITY</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.ijs.si/software/snprintf/</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>REVISION<sp/>HISTORY</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>1999-04<sp/><sp/>V0.9<sp/><sp/>Mark<sp/>Martinec</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>initial<sp/>version,<sp/>some<sp/>modifications<sp/>after<sp/>comparing<sp/>printf</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>man<sp/>pages<sp/>for<sp/>Digital<sp/>Unix<sp/>4.0,<sp/>Solaris<sp/>2.6<sp/>and<sp/>HPUX<sp/>10,</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>checking<sp/>how<sp/>Perl<sp/>handles<sp/>sprintf<sp/>(differently!);</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>1999-04-09<sp/><sp/><sp/>V1.0<sp/><sp/>Mark<sp/>Martinec<sp/>&lt;mark.martinec@ijs.si&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>added<sp/>main<sp/>test<sp/>program,<sp/>fixed<sp/>remaining<sp/>inconsistencies,</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>added<sp/>optional<sp/>(long<sp/>long<sp/>int)<sp/>support;</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>1999-04-12<sp/><sp/><sp/>V1.1<sp/><sp/>Mark<sp/>Martinec<sp/>&lt;mark.martinec@ijs.si&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>support<sp/>the<sp/>&apos;p&apos;<sp/>conversion<sp/>(pointer<sp/>to<sp/>void);</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>if<sp/>a<sp/>string<sp/>precision<sp/>is<sp/>specified</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make<sp/>sure<sp/>the<sp/>string<sp/>beyond<sp/>the<sp/>specified<sp/>precision</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>not<sp/>be<sp/>referenced<sp/>(e.g.<sp/>by<sp/>strlen);</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>1999-04-13<sp/><sp/><sp/>V1.2<sp/><sp/>Mark<sp/>Martinec<sp/>&lt;mark.martinec@ijs.si&gt;</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>support<sp/>synonyms<sp/>%D=%ld,<sp/>%U=%lu,<sp/>%O=%lo;</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>speed<sp/>up<sp/>the<sp/>case<sp/>of<sp/>long<sp/>format<sp/>string<sp/>with<sp/>few<sp/>conversions;</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>1999-06-30<sp/><sp/><sp/>V1.3<sp/><sp/>Mark<sp/>Martinec<sp/>&lt;mark.martinec@ijs.si&gt;</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>fixed<sp/>runaway<sp/>loop<sp/>(eventually<sp/>crashing<sp/>when<sp/>str_l<sp/>wraps</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beyond<sp/>2^31)<sp/>while<sp/>copying<sp/>format<sp/>string<sp/>without</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conversion<sp/>specifiers<sp/>to<sp/>a<sp/>buffer<sp/>that<sp/>is<sp/>too<sp/>short</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(thanks<sp/>to<sp/>Edwin<sp/>Young<sp/>&lt;edwiny@autonomy.com&gt;<sp/>for</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spotting<sp/>the<sp/>problem);</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>added<sp/>macros<sp/>PORTABLE_SNPRINTF_VERSION_(MAJOR|MINOR)</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>snprintf.h</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>2000-02-14<sp/><sp/><sp/>V2.0<sp/>(never<sp/>released)<sp/>Mark<sp/>Martinec<sp/>&lt;mark.martinec@ijs.si&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>relaxed<sp/>license<sp/>terms:<sp/>The<sp/>Artistic<sp/>License<sp/>now<sp/>applies.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>You<sp/>may<sp/>still<sp/>apply<sp/>the<sp/>GNU<sp/>GENERAL<sp/>PUBLIC<sp/>LICENSE</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>was<sp/>distributed<sp/>with<sp/>previous<sp/>versions,<sp/>if<sp/>you<sp/>prefer;</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>changed<sp/>REVISION<sp/>HISTORY<sp/>dates<sp/>to<sp/>use<sp/>ISO<sp/>8601<sp/>date<sp/>format;</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>added<sp/>vsnprintf<sp/>(patch<sp/>also<sp/>independently<sp/>proposed<sp/>by</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Caolan<sp/>McNamara<sp/>2000-05-04,<sp/>and<sp/>Keith<sp/>M<sp/>Willenson<sp/>2000-06-01)</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>2000-06-27<sp/><sp/><sp/>V2.1<sp/><sp/>Mark<sp/>Martinec<sp/>&lt;mark.martinec@ijs.si&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>removed<sp/>POSIX<sp/>check<sp/>for<sp/>str_m&lt;1;<sp/>value<sp/>0<sp/>for<sp/>str_m<sp/>is</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allowed<sp/>by<sp/>ISO<sp/>C99<sp/>(and<sp/>GNU<sp/>C<sp/>library<sp/>2.1)<sp/>-<sp/>(pointed<sp/>out</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>2000-05-04<sp/>by<sp/>Caolan<sp/>McNamara,<sp/>caolan@<sp/>csn<sp/>dot<sp/>ul<sp/>dot<sp/>ie).</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Besides<sp/>relaxed<sp/>license<sp/>this<sp/>change<sp/>in<sp/>standards<sp/>adherence</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>the<sp/>main<sp/>reason<sp/>to<sp/>bump<sp/>up<sp/>the<sp/>major<sp/>version<sp/>number;</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>added<sp/>nonstandard<sp/>routines<sp/>asnprintf,<sp/>vasnprintf,<sp/>asprintf,</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vasprintf<sp/>that<sp/>dynamically<sp/>allocate<sp/>storage<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resulting<sp/>string;<sp/>these<sp/>routines<sp/>are<sp/>not<sp/>compiled<sp/>by<sp/>default,</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>see<sp/>comments<sp/>where<sp/>NEED_V?ASN?PRINTF<sp/>macros<sp/>are<sp/>defined;</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>autoconf<sp/>contributed<sp/>by<sp/>Caolan<sp/>McNamara</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>2000-10-06<sp/><sp/><sp/>V2.2<sp/><sp/>Mark<sp/>Martinec<sp/>&lt;mark.martinec@ijs.si&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>BUG<sp/>FIX:<sp/>the<sp/>%c<sp/>conversion<sp/>used<sp/>a<sp/>temporary<sp/>variable</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>was<sp/>no<sp/>longer<sp/>in<sp/>scope<sp/>when<sp/>referenced,</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>possibly<sp/>causing<sp/>incorrect<sp/>resulting<sp/>character;</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>BUG<sp/>FIX:<sp/>make<sp/>precision<sp/>and<sp/>minimal<sp/>field<sp/>width<sp/>unsigned</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>handle<sp/>huge<sp/>values<sp/>(2^31<sp/>&lt;=<sp/>n<sp/>&lt;<sp/>2^32)<sp/>correctly;</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>also<sp/>be<sp/>more<sp/>careful<sp/>in<sp/>the<sp/>use<sp/>of<sp/>signed/unsigned/size_t</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal<sp/>variables<sp/>-<sp/>probably<sp/>more<sp/>careful<sp/>than<sp/>many</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vendor<sp/>implementations,<sp/>but<sp/>there<sp/>may<sp/>still<sp/>be<sp/>a<sp/>case</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>huge<sp/>values<sp/>of<sp/>str_m,<sp/>precision<sp/>or<sp/>minimal<sp/>field</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>could<sp/>cause<sp/>incorrect<sp/>behaviour;</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>use<sp/>separate<sp/>variables<sp/>for<sp/>signed/unsigned<sp/>arguments,</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>for<sp/>short/int,<sp/>long,<sp/>and<sp/>long<sp/>long<sp/>argument<sp/>lengths</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>avoid<sp/>possible<sp/>incompatibilities<sp/>on<sp/>certain</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computer<sp/>architectures.<sp/>Also<sp/>use<sp/>separate<sp/>variable</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_sign<sp/>to<sp/>hold<sp/>sign<sp/>of<sp/>a<sp/>numeric<sp/>argument,</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>make<sp/>code<sp/>more<sp/>transparent;</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>some<sp/>fiddling<sp/>with<sp/>zero<sp/>padding<sp/>and<sp/>&quot;0x&quot;<sp/>to<sp/>make<sp/>it</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Linux<sp/>compatible;</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>systematically<sp/>use<sp/>macros<sp/>fast_memcpy<sp/>and<sp/>fast_memset</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instead<sp/>of<sp/>case-by-case<sp/>hand<sp/>optimization;<sp/>determine<sp/>some</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>breakeven<sp/>string<sp/>lengths<sp/>for<sp/>different<sp/>architectures;</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>terminology<sp/>change:<sp/>&apos;format&apos;<sp/>-&gt;<sp/>&apos;conversion<sp/>specifier&apos;,</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;C9x&apos;<sp/>-&gt;<sp/>&apos;ISO/IEC<sp/>9899:1999<sp/>(&quot;ISO<sp/>C99&quot;)&apos;,</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;alternative<sp/>form&apos;<sp/>-&gt;<sp/>&apos;alternate<sp/>form&apos;,</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;data<sp/>type<sp/>modifier&apos;<sp/>-&gt;<sp/>&apos;length<sp/>modifier&apos;;</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>several<sp/>comments<sp/>rephrased<sp/>and<sp/>new<sp/>ones<sp/>added;</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>make<sp/>compiler<sp/>not<sp/>complain<sp/>about<sp/>&apos;credits&apos;<sp/>defined<sp/>but</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>used;</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>HAVE_SNPRINTF<sp/>if<sp/>your<sp/>system<sp/>already<sp/>has<sp/>snprintf<sp/>and<sp/>vsnprintf.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>If<sp/>HAVE_SNPRINTF<sp/>is<sp/>defined<sp/>this<sp/>module<sp/>will<sp/>not<sp/>produce<sp/>code<sp/>for</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>snprintf<sp/>and<sp/>vsnprintf,<sp/>unless<sp/>PREFER_PORTABLE_SNPRINTF<sp/>is<sp/>defined<sp/>as<sp/>well,</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>causing<sp/>this<sp/>portable<sp/>version<sp/>of<sp/>snprintf<sp/>to<sp/>be<sp/>called<sp/>portable_snprintf</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>(and<sp/>portable_vsnprintf).</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>HAVE_SNPRINTF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>PREFER_PORTABLE_SNPRINTF<sp/>if<sp/>your<sp/>system<sp/>does<sp/>have<sp/>snprintf<sp/>and</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>vsnprintf<sp/>but<sp/>you<sp/>would<sp/>prefer<sp/>to<sp/>use<sp/>the<sp/>portable<sp/>routine(s)<sp/>instead.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>In<sp/>this<sp/>case<sp/>the<sp/>portable<sp/>routine<sp/>is<sp/>declared<sp/>as<sp/>portable_snprintf</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>(and<sp/>portable_vsnprintf)<sp/>and<sp/>a<sp/>macro<sp/>&apos;snprintf&apos;<sp/>(and<sp/>&apos;vsnprintf&apos;)</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>is<sp/>defined<sp/>to<sp/>expand<sp/>to<sp/>&apos;portable_v?snprintf&apos;<sp/>-<sp/>see<sp/>file<sp/>snprintf.h<sp/>.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>Defining<sp/>this<sp/>macro<sp/>is<sp/>only<sp/>useful<sp/>if<sp/>HAVE_SNPRINTF<sp/>is<sp/>also<sp/>defined,</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>but<sp/>does<sp/>does<sp/>no<sp/>harm<sp/>if<sp/>defined<sp/>nevertheless.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>PREFER_PORTABLE_SNPRINTF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>SNPRINTF_LONGLONG_SUPPORT<sp/>if<sp/>you<sp/>want<sp/>to<sp/>support</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>data<sp/>type<sp/>(long<sp/>long<sp/>int)<sp/>and<sp/>length<sp/>modifier<sp/>&apos;ll&apos;<sp/>(e.g.<sp/>%lld).</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>If<sp/>undefined,<sp/>&apos;ll&apos;<sp/>is<sp/>recognized<sp/>but<sp/>treated<sp/>as<sp/>a<sp/>single<sp/>&apos;l&apos;.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>system&apos;s<sp/>sprintf<sp/>does<sp/>not<sp/>handle<sp/>&apos;ll&apos;</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>the<sp/>SNPRINTF_LONGLONG_SUPPORT<sp/>must<sp/>not<sp/>be<sp/>defined!</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>off<sp/>by<sp/>default<sp/>as<sp/>(long<sp/>long<sp/>int)<sp/>is<sp/>a<sp/>language<sp/>extension.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>SNPRINTF_LONGLONG_SUPPORT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>NEED_SNPRINTF_ONLY<sp/>if<sp/>you<sp/>only<sp/>need<sp/>snprintf,<sp/>and<sp/>not<sp/>vsnprintf.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>If<sp/>NEED_SNPRINTF_ONLY<sp/>is<sp/>defined,<sp/>the<sp/>snprintf<sp/>will<sp/>be<sp/>defined<sp/>directly,</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>otherwise<sp/>both<sp/>snprintf<sp/>and<sp/>vsnprintf<sp/>routines<sp/>will<sp/>be<sp/>defined</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>and<sp/>snprintf<sp/>will<sp/>be<sp/>a<sp/>simple<sp/>wrapper<sp/>around<sp/>vsnprintf,<sp/>at<sp/>the<sp/>expense</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>of<sp/>an<sp/>extra<sp/>procedure<sp/>call.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>NEED_SNPRINTF_ONLY<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>NEED_V?ASN?PRINTF<sp/>macros<sp/>if<sp/>you<sp/>need<sp/>library<sp/>extension</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>routines<sp/>asprintf,<sp/>vasprintf,<sp/>asnprintf,<sp/>vasnprintf<sp/>respectively,</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>and<sp/>your<sp/>system<sp/>library<sp/>does<sp/>not<sp/>provide<sp/>them.<sp/>They<sp/>are<sp/>all<sp/>small</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>wrapper<sp/>routines<sp/>around<sp/>portable_vsnprintf.<sp/>Defining<sp/>any<sp/>of<sp/>the<sp/>four</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>NEED_V?ASN?PRINTF<sp/>macros<sp/>automatically<sp/>turns<sp/>off<sp/>NEED_SNPRINTF_ONLY</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>and<sp/>turns<sp/>on<sp/>PREFER_PORTABLE_SNPRINTF.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>Watch<sp/>for<sp/>name<sp/>conflicts<sp/>with<sp/>the<sp/>system<sp/>library<sp/>if<sp/>these<sp/>routines</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>are<sp/>already<sp/>present<sp/>there.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>NOTE:<sp/>vasprintf<sp/>and<sp/>vasnprintf<sp/>routines<sp/>need<sp/>va_copy()<sp/>from<sp/>stdarg.h,<sp/>as</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>specified<sp/>by<sp/>C99,<sp/>to<sp/>be<sp/>able<sp/>to<sp/>traverse<sp/>the<sp/>same<sp/>list<sp/>of<sp/>arguments<sp/>twice.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>I<sp/>don&apos;t<sp/>know<sp/>of<sp/>any<sp/>other<sp/>standard<sp/>and<sp/>portable<sp/>way<sp/>of<sp/>achieving<sp/>the<sp/>same.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>With<sp/>some<sp/>versions<sp/>of<sp/>gcc<sp/>you<sp/>may<sp/>use<sp/>__va_copy().<sp/>You<sp/>might<sp/>even<sp/>get<sp/>away</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>with<sp/>&quot;ap2<sp/>=<sp/>ap&quot;,<sp/>in<sp/>this<sp/>case<sp/>you<sp/>must<sp/>not<sp/>call<sp/>va_end(ap2)<sp/>!</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/><sp/>#define<sp/>va_copy(ap2,ap)<sp/>ap2<sp/>=<sp/>ap</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>NEED_ASPRINTF<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>NEED_ASNPRINTF<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>NEED_VASPRINTF<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>NEED_VASNPRINTF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>following<sp/>macros<sp/>if<sp/>desired:</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/><sp/><sp/>SOLARIS_COMPATIBLE,<sp/>SOLARIS_BUG_COMPATIBLE,</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/><sp/>HPUX_COMPATIBLE,<sp/>HPUX_BUG_COMPATIBLE,<sp/>LINUX_COMPATIBLE,</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/><sp/>DIGITAL_UNIX_COMPATIBLE,<sp/>DIGITAL_UNIX_BUG_COMPATIBLE,</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/><sp/>PERL_COMPATIBLE,<sp/>PERL_BUG_COMPATIBLE,</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>-<sp/>For<sp/>portable<sp/>applications<sp/>it<sp/>is<sp/>best<sp/>not<sp/>to<sp/>rely<sp/>on<sp/>peculiarities</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/><sp/><sp/>of<sp/>a<sp/>given<sp/>implementation<sp/>so<sp/>it<sp/>may<sp/>be<sp/>best<sp/>not<sp/>to<sp/>define<sp/>any</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/><sp/>of<sp/>the<sp/>macros<sp/>that<sp/>select<sp/>compatibility<sp/>and<sp/>to<sp/>avoid<sp/>features</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/><sp/><sp/>that<sp/>vary<sp/>among<sp/>the<sp/>systems.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>-<sp/>Selecting<sp/>compatibility<sp/>with<sp/>more<sp/>than<sp/>one<sp/>operating<sp/>system</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/><sp/>is<sp/>not<sp/>strictly<sp/>forbidden<sp/>but<sp/>is<sp/>not<sp/>recommended.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>-<sp/>&apos;x&apos;_BUG_COMPATIBLE<sp/>implies<sp/>&apos;x&apos;_COMPATIBLE<sp/>.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>-<sp/>&apos;x&apos;_COMPATIBLE<sp/>refers<sp/>to<sp/>(and<sp/>enables)<sp/>a<sp/>behaviour<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documented<sp/>in<sp/>a<sp/>sprintf<sp/>man<sp/>page<sp/>on<sp/>a<sp/>given<sp/>operating<sp/>system</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/><sp/><sp/>and<sp/>actually<sp/>adhered<sp/>to<sp/>by<sp/>the<sp/>system&apos;s<sp/>sprintf<sp/>(but<sp/>not<sp/>on</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/><sp/><sp/>most<sp/>other<sp/>operating<sp/>systems).<sp/>It<sp/>may<sp/>also<sp/>refer<sp/>to<sp/>and<sp/>enable</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/><sp/><sp/>a<sp/>behaviour<sp/>that<sp/>is<sp/>declared<sp/>&apos;undefined&apos;<sp/>or<sp/>&apos;implementation<sp/>specific&apos;</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/><sp/><sp/>in<sp/>the<sp/>man<sp/>page<sp/>but<sp/>a<sp/>given<sp/>implementation<sp/>behaves<sp/>predictably</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/><sp/><sp/>in<sp/>a<sp/>certain<sp/>way.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>-<sp/>&apos;x&apos;_BUG_COMPATIBLE<sp/>refers<sp/>to<sp/>(and<sp/>enables)<sp/>a<sp/>behaviour<sp/>of<sp/>system&apos;s<sp/>sprintf</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/><sp/><sp/>that<sp/>contradicts<sp/>the<sp/>sprintf<sp/>man<sp/>page<sp/>on<sp/>the<sp/>same<sp/>operating<sp/>system.</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/>-<sp/>I<sp/>do<sp/>not<sp/>claim<sp/>that<sp/>the<sp/>&apos;x&apos;_COMPATIBLE<sp/>and<sp/>&apos;x&apos;_BUG_COMPATIBLE</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/><sp/><sp/>conditionals<sp/>take<sp/>into<sp/>account<sp/>all<sp/>idiosyncrasies<sp/>of<sp/>a<sp/>particular</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/><sp/><sp/>implementation,<sp/>there<sp/>may<sp/>be<sp/>other<sp/>incompatibilities.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=============================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>NO<sp/>USER<sp/>SERVICABLE<sp/>PARTS<sp/>FOLLOWING<sp/>THIS<sp/>POINT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=============================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="d2/d7f/snprintf_8c_1ae7b63d1b04b47a62e0168225e000824c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PORTABLE_SNPRINTF_VERSION_MAJOR<sp/>2</highlight></codeline>
<codeline lineno="296" refid="d2/d7f/snprintf_8c_1a076d04c914732567f8300676b32c3b08" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PORTABLE_SNPRINTF_VERSION_MINOR<sp/>2</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_ASPRINTF)<sp/>||<sp/>defined(NEED_ASNPRINTF)<sp/>||<sp/>defined(NEED_VASPRINTF)<sp/>||<sp/>defined(NEED_VASNPRINTF)</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(NEED_SNPRINTF_ONLY)</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>NEED_SNPRINTF_ONLY</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!defined(PREFER_PORTABLE_SNPRINTF)</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>PREFER_PORTABLE_SNPRINTF</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SOLARIS_BUG_COMPATIBLE)<sp/>&amp;&amp;<sp/>!defined(SOLARIS_COMPATIBLE)</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SOLARIS_COMPATIBLE</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPUX_BUG_COMPATIBLE)<sp/>&amp;&amp;<sp/>!defined(HPUX_COMPATIBLE)</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HPUX_COMPATIBLE</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DIGITAL_UNIX_BUG_COMPATIBLE)<sp/>&amp;&amp;<sp/>!defined(DIGITAL_UNIX_COMPATIBLE)</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DIGITAL_UNIX_COMPATIBLE</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PERL_BUG_COMPATIBLE)<sp/>&amp;&amp;<sp/>!defined(PERL_COMPATIBLE)</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PERL_COMPATIBLE</highlight></codeline>
<codeline lineno="321"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(LINUX_BUG_COMPATIBLE)<sp/>&amp;&amp;<sp/>!defined(LINUX_COMPATIBLE)</highlight></codeline>
<codeline lineno="324"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LINUX_COMPATIBLE</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>isdigit</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>isdigit</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="338" refid="d2/d7f/snprintf_8c_1a80e33e966a7ec3facaf0b2b4afaf5be5" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>isdigit(c)<sp/>((c)<sp/>&gt;=<sp/>&apos;0&apos;<sp/>&amp;&amp;<sp/>(c)<sp/>&lt;=<sp/>&apos;9&apos;)</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>copying<sp/>strings<sp/>longer<sp/>or<sp/>equal<sp/>to<sp/>&apos;breakeven_point&apos;</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>it<sp/>is<sp/>more<sp/>efficient<sp/>to<sp/>call<sp/>memcpy()<sp/>than<sp/>to<sp/>do<sp/>it<sp/>inline.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>The<sp/>value<sp/>depends<sp/>mostly<sp/>on<sp/>the<sp/>processor<sp/>architecture,</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>but<sp/>also<sp/>on<sp/>the<sp/>compiler<sp/>and<sp/>its<sp/>optimization<sp/>capabilities.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*<sp/>The<sp/>value<sp/>is<sp/>not<sp/>critical,<sp/>some<sp/>small<sp/>value<sp/>greater<sp/>than<sp/>zero</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/>will<sp/>be<sp/>just<sp/>fine<sp/>if<sp/>you<sp/>don&apos;t<sp/>care<sp/>to<sp/>squeeze<sp/>every<sp/>drop</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/>of<sp/>performance<sp/>out<sp/>of<sp/>the<sp/>code.</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/>Small<sp/>values<sp/>favor<sp/>memcpy,<sp/>large<sp/>values<sp/>favor<sp/>inline<sp/>code.</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__alpha__)<sp/>||<sp/>defined(__alpha)</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>breakeven_point<sp/><sp/><sp/>2<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AXP<sp/>(DEC<sp/>Alpha)<sp/><sp/><sp/><sp/><sp/>-<sp/>gcc<sp/>or<sp/>cc<sp/>or<sp/>egcs<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(__i386__)<sp/><sp/>||<sp/>defined(__i386)</highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>breakeven_point<sp/><sp/>12<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intel<sp/>Pentium/Linux<sp/>-<sp/>gcc<sp/>2.96<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="355"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="356"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(__hppa)</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>breakeven_point<sp/><sp/>10<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HP-PA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>gcc<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="359"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(__sparc__)<sp/>||<sp/>defined(__sparc)</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>breakeven_point<sp/><sp/>33<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sun<sp/>Sparc<sp/>5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>gcc<sp/>2.8.1<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="362"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>some<sp/>other<sp/>values<sp/>of<sp/>possible<sp/>interest:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>breakeven_point<sp/><sp/>8<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>VAX<sp/>4000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>vaxc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>breakeven_point<sp/>19<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>VAX<sp/>4000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>gcc<sp/>2.7.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>breakeven_point</highlight></codeline>
<codeline lineno="368" refid="d2/d7f/snprintf_8c_1a92682423eb7bc3233c440b67a429b870" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>breakeven_point<sp/><sp/><sp/>6<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>some<sp/>reasonable<sp/>one-size-fits-all<sp/>value<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="d2/d7f/snprintf_8c_1abdd8c3490d94c83fb3866e0e9139db38" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fast_memcpy(d,s,n)<sp/>\</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"><sp/><sp/>{<sp/>register<sp/>size_t<sp/>nn<sp/>=<sp/>(size_t)(n);<sp/>\</highlight></codeline>
<codeline lineno="373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(nn<sp/>&gt;=<sp/>breakeven_point)<sp/>memcpy((d),<sp/>(s),<sp/>nn);<sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(nn<sp/>&gt;<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>proc<sp/>call<sp/>overhead<sp/>is<sp/>worth<sp/>only<sp/>for<sp/>large<sp/>strings*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>char<sp/>*dd;<sp/>register<sp/>const<sp/>char<sp/>*ss;<sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(ss=(s),<sp/>dd=(d);<sp/>nn&gt;0;<sp/>nn--)<sp/>*dd++<sp/>=<sp/>*ss++;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="d2/d7f/snprintf_8c_1ad448207baaebdf239f9a6eefc806201e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fast_memset(d,c,n)<sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/>{<sp/>register<sp/>size_t<sp/>nn<sp/>=<sp/>(size_t)(n);<sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(nn<sp/>&gt;=<sp/>breakeven_point)<sp/>memset((d),<sp/>(int)(c),<sp/>nn);<sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(nn<sp/>&gt;<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>proc<sp/>call<sp/>overhead<sp/>is<sp/>worth<sp/>only<sp/>for<sp/>large<sp/>strings*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>char<sp/>*dd;<sp/>register<sp/>const<sp/>int<sp/>cc=(int)(c);<sp/>\</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(dd=(d);<sp/>nn&gt;0;<sp/>nn--)<sp/>*dd++<sp/>=<sp/>cc;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>prototypes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_ASPRINTF)</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>asprintf<sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/></highlight><highlight class="comment">/*args*/</highlight><highlight class="normal"><sp/>...);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_VASPRINTF)</highlight></codeline>
<codeline lineno="391"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vasprintf<sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_ASNPRINTF)</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>asnprintf<sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/></highlight><highlight class="comment">/*args*/</highlight><highlight class="normal"><sp/>...);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_VASNPRINTF)</highlight></codeline>
<codeline lineno="397"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vasnprintf<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HAVE_SNPRINTF)</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>declare<sp/>our<sp/>portable<sp/>snprintf<sp/><sp/>routine<sp/>under<sp/>name<sp/>portable_snprintf<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>declare<sp/>our<sp/>portable<sp/>vsnprintf<sp/>routine<sp/>under<sp/>name<sp/>portable_vsnprintf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>declare<sp/>our<sp/>portable<sp/>routines<sp/>under<sp/>names<sp/>snprintf<sp/>and<sp/>vsnprintf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="d2/d7f/snprintf_8c_1a93ff4ec8efd9a3f9abfcf127fa408a0a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>portable_snprintf<sp/>snprintf</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>!defined(NEED_SNPRINTF_ONLY)</highlight></codeline>
<codeline lineno="407" refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>portable_vsnprintf<sp/>vsnprintf</highlight></codeline>
<codeline lineno="408"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(HAVE_SNPRINTF)<sp/>||<sp/>defined(PREFER_PORTABLE_SNPRINTF)</highlight></codeline>
<codeline lineno="412"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d2/d7f/snprintf_8c_1a93ff4ec8efd9a3f9abfcf127fa408a0a" kindref="member">portable_snprintf</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/></highlight><highlight class="comment">/*args*/</highlight><highlight class="normal"><sp/>...);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NEED_SNPRINTF_ONLY)</highlight></codeline>
<codeline lineno="414"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" kindref="member">portable_vsnprintf</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="416"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="417"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>credits[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\n\</highlight></codeline>
<codeline lineno="421"><highlight class="stringliteral">@(#)snprintf.c,<sp/>v2.2:<sp/>Mark<sp/>Martinec,<sp/>&lt;mark.martinec@ijs.si&gt;\n\</highlight></codeline>
<codeline lineno="422"><highlight class="stringliteral">@(#)snprintf.c,<sp/>v2.2:<sp/>Copyright<sp/>1999,<sp/>Mark<sp/>Martinec.<sp/>Frontier<sp/>Artistic<sp/>License<sp/>applies.\n\</highlight></codeline>
<codeline lineno="423"><highlight class="stringliteral">@(#)snprintf.c,<sp/>v2.2:<sp/>http://www.ijs.si/software/snprintf/\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_ASPRINTF)</highlight></codeline>
<codeline lineno="426"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>asprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/></highlight><highlight class="comment">/*args*/</highlight><highlight class="normal"><sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_m;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_l;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>*ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>fmt);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>measure<sp/>the<sp/>required<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>str_l<sp/>=<sp/><ref refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" kindref="member">portable_vsnprintf</ref>(NULL,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)0,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>assert(str_l<sp/>&gt;=<sp/>0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>possible<sp/>integer<sp/>overflow<sp/>if<sp/>str_m<sp/>&gt;<sp/>INT_MAX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(str_m<sp/>=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)str_l<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ptr<sp/>==<sp/>NULL)<sp/>{<sp/>errno<sp/>=<sp/>ENOMEM;<sp/>str_l<sp/>=<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_l2;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>str_l2<sp/>=<sp/><ref refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" kindref="member">portable_vsnprintf</ref>(*ptr,<sp/>str_m,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(str_l2<sp/>==<sp/>str_l);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_l;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="448"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_VASPRINTF)</highlight></codeline>
<codeline lineno="450"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vasprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_m;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_l;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>*ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>{<sp/>va_list<sp/>ap2;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>va_copy(ap2,<sp/>ap);<sp/><sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>consume<sp/>the<sp/>original<sp/>ap,<sp/>we&apos;ll<sp/>need<sp/>it<sp/>again<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>str_l<sp/>=<sp/><ref refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" kindref="member">portable_vsnprintf</ref>(NULL,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)0,<sp/>fmt,<sp/>ap2);</highlight><highlight class="comment">/*get<sp/>required<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(ap2);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>assert(str_l<sp/>&gt;=<sp/>0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>possible<sp/>integer<sp/>overflow<sp/>if<sp/>str_m<sp/>&gt;<sp/>INT_MAX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(str_m<sp/>=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)str_l<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ptr<sp/>==<sp/>NULL)<sp/>{<sp/>errno<sp/>=<sp/>ENOMEM;<sp/>str_l<sp/>=<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_l2<sp/>=<sp/><ref refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" kindref="member">portable_vsnprintf</ref>(*ptr,<sp/>str_m,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(str_l2<sp/>==<sp/>str_l);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_l;</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="470"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_ASNPRINTF)</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>asnprintf<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/></highlight><highlight class="comment">/*args*/</highlight><highlight class="normal"><sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_l;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>*ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>fmt);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>measure<sp/>the<sp/>required<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>str_l<sp/>=<sp/><ref refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" kindref="member">portable_vsnprintf</ref>(NULL,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)0,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>assert(str_l<sp/>&gt;=<sp/>0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>possible<sp/>integer<sp/>overflow<sp/>if<sp/>str_m<sp/>&gt;<sp/>INT_MAX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)str_l<sp/>+<sp/>1<sp/>&lt;<sp/>str_m)<sp/>str_m<sp/>=<sp/>(size_t)str_l<sp/>+<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>truncate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>str_m<sp/>is<sp/>0,<sp/>no<sp/>buffer<sp/>is<sp/>allocated,<sp/>just<sp/>set<sp/>*ptr<sp/>to<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_m<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>interested<sp/>in<sp/>resulting<sp/>string,<sp/>just<sp/>return<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(str_m);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ptr<sp/>==<sp/>NULL)<sp/>{<sp/>errno<sp/>=<sp/>ENOMEM;<sp/>str_l<sp/>=<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_l2;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str_l2<sp/>=<sp/><ref refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" kindref="member">portable_vsnprintf</ref>(*ptr,<sp/>str_m,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(str_l2<sp/>==<sp/>str_l);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_l;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="498"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_VASNPRINTF)</highlight></codeline>
<codeline lineno="500"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vasnprintf<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_l;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>*ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>{<sp/>va_list<sp/>ap2;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>va_copy(ap2,<sp/>ap);<sp/><sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>consume<sp/>the<sp/>original<sp/>ap,<sp/>we&apos;ll<sp/>need<sp/>it<sp/>again<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>str_l<sp/>=<sp/><ref refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" kindref="member">portable_vsnprintf</ref>(NULL,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)0,<sp/>fmt,<sp/>ap2);</highlight><highlight class="comment">/*get<sp/>required<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(ap2);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>assert(str_l<sp/>&gt;=<sp/>0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>possible<sp/>integer<sp/>overflow<sp/>if<sp/>str_m<sp/>&gt;<sp/>INT_MAX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)str_l<sp/>+<sp/>1<sp/>&lt;<sp/>str_m)<sp/>str_m<sp/>=<sp/>(size_t)str_l<sp/>+<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>truncate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>str_m<sp/>is<sp/>0,<sp/>no<sp/>buffer<sp/>is<sp/>allocated,<sp/>just<sp/>set<sp/>*ptr<sp/>to<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_m<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>interested<sp/>in<sp/>resulting<sp/>string,<sp/>just<sp/>return<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(str_m);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ptr<sp/>==<sp/>NULL)<sp/>{<sp/>errno<sp/>=<sp/>ENOMEM;<sp/>str_l<sp/>=<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_l2<sp/>=<sp/><ref refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" kindref="member">portable_vsnprintf</ref>(*ptr,<sp/>str_m,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(str_l2<sp/>==<sp/>str_l);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_l;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="524"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>system<sp/>does<sp/>have<sp/>snprintf<sp/>and<sp/>the<sp/>portable<sp/>routine<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>specifically<sp/>required,<sp/>this<sp/>module<sp/>produces<sp/>no<sp/>code<sp/>for<sp/>snprintf/vsnprintf.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(HAVE_SNPRINTF)<sp/>||<sp/>defined(PREFER_PORTABLE_SNPRINTF)</highlight></codeline>
<codeline lineno="530"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NEED_SNPRINTF_ONLY)</highlight></codeline>
<codeline lineno="532" refid="d2/d7f/snprintf_8c_1ae5dc736201ed48de501c7491e23719e5" refkind="member"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d2/d7f/snprintf_8c_1a93ff4ec8efd9a3f9abfcf127fa408a0a" kindref="member">portable_snprintf</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/></highlight><highlight class="comment">/*args*/</highlight><highlight class="normal"><sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_l;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>str_l<sp/>=<sp/><ref refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" kindref="member">portable_vsnprintf</ref>(str,<sp/>str_m,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_l;</highlight></codeline>
<codeline lineno="540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="542"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_SNPRINTF_ONLY)</highlight></codeline>
<codeline lineno="544"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d2/d7f/snprintf_8c_1a93ff4ec8efd9a3f9abfcf127fa408a0a" kindref="member">portable_snprintf</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/></highlight><highlight class="comment">/*args*/</highlight><highlight class="normal"><sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="546" refid="d2/d7f/snprintf_8c_1aa73a3dcaf1ccfeaecc146df5ebeb8b0a" refkind="member"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d2/d7f/snprintf_8c_1ac87f4bcc17a27a39813acfbc8d2e6f05" kindref="member">portable_vsnprintf</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="548"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_SNPRINTF_ONLY)</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>fmt;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>contrast<sp/>with<sp/>POSIX,<sp/>the<sp/>ISO<sp/>C99<sp/>now<sp/>says</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*<sp/>that<sp/>str<sp/>can<sp/>be<sp/>NULL<sp/>and<sp/>str_m<sp/>can<sp/>be<sp/>0.</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>more<sp/>useful<sp/>than<sp/>the<sp/>old:<sp/><sp/>if<sp/>(str_m<sp/>&lt;<sp/>1)<sp/>return<sp/>-1;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_SNPRINTF_ONLY)</highlight></codeline>
<codeline lineno="560"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="562"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/>p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>(str_l<sp/>&lt;<sp/>str_m)<sp/>str[str_l++]<sp/>=<sp/>*p++;<sp/><sp/><sp/><sp/>--<sp/>this<sp/>would<sp/>be<sp/>sufficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>but<sp/>the<sp/>following<sp/>code<sp/>achieves<sp/>better<sp/>performance<sp/>for<sp/>cases</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>where<sp/>format<sp/>string<sp/>is<sp/>long<sp/>and<sp/>contains<sp/>few<sp/>conversions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*q<sp/>=<sp/>strchr(p+1,</highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>!q<sp/>?<sp/>strlen(p)<sp/>:<sp/>(q-p);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_l<sp/>&lt;<sp/>str_m)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>avail<sp/>=<sp/>str_m-str_l;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d7f/snprintf_8c_1abdd8c3490d94c83fb3866e0e9139db38" kindref="member">fast_memcpy</ref>(str+str_l,<sp/>p,<sp/>(n&gt;avail?avail:n));</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>n;<sp/>str_l<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*starting_p;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_field_width<sp/>=<sp/>0,<sp/>precision<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zero_padding<sp/>=<sp/>0,<sp/>precision_specified<sp/>=<sp/>0,<sp/>justify_left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alternate_form<sp/>=<sp/>0,<sp/>force_sign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>space_for_positive<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>If<sp/>both<sp/>the<sp/>&apos;<sp/>&apos;<sp/>and<sp/>&apos;+&apos;<sp/>flags<sp/>appear,</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>&apos;<sp/>&apos;<sp/>flag<sp/>should<sp/>be<sp/>ignored.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>length_modifier<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allowed<sp/>values:<sp/>\0,<sp/>h,<sp/>l,<sp/>L<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmp[32];</highlight><highlight class="comment">/*<sp/>temporary<sp/>buffer<sp/>for<sp/>simple<sp/>numeric-&gt;string<sp/>conversion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str_arg;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>string<sp/>address<sp/>in<sp/>case<sp/>of<sp/>string<sp/>argument<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_arg_l;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>natural<sp/>field<sp/>width<sp/>of<sp/>arg<sp/>without<sp/>padding</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>sign<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>uchar_arg;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unsigned<sp/>char<sp/>argument<sp/>value<sp/>-<sp/>only<sp/>defined<sp/>for<sp/>c<sp/>conversion.</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N.B.<sp/>standard<sp/>explicitly<sp/>states<sp/>the<sp/>char<sp/>argument<sp/>for</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>c<sp/>conversion<sp/>is<sp/>unsigned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>number_of_zeros_to_pad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>zeros<sp/>to<sp/>be<sp/>inserted<sp/>for<sp/>numeric<sp/>conversions</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>required<sp/>by<sp/>the<sp/>precision<sp/>or<sp/>minimal<sp/>field<sp/>width<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>zero_padding_insertion_ind<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>into<sp/>tmp<sp/>where<sp/>zero<sp/>padding<sp/>is<sp/>to<sp/>be<sp/>inserted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>fmt_spec<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>conversion<sp/>specifier<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str_arg<sp/>=<sp/>credits;</highlight><highlight class="comment">/*<sp/>just<sp/>to<sp/>make<sp/>compiler<sp/>happy<sp/>(defined<sp/>but<sp/>not<sp/>used)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str_arg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>starting_p<sp/>=<sp/>p;<sp/>p++;<sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>&apos;%&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parse<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>||<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal"><sp/>||<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*p)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:<sp/>zero_padding<sp/>=<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:<sp/>justify_left<sp/>=<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:<sp/>force_sign<sp/>=<sp/>1;<sp/>space_for_positive<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:<sp/>force_sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>both<sp/>the<sp/>&apos;<sp/>&apos;<sp/>and<sp/>&apos;+&apos;<sp/>flags<sp/>appear,<sp/>the<sp/>&apos;<sp/>&apos;<sp/>flag<sp/>should<sp/>be<sp/>ignored<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PERL_COMPATIBLE</highlight></codeline>
<codeline lineno="616"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>...<sp/>but<sp/>in<sp/>Perl<sp/>the<sp/>last<sp/>of<sp/>&apos;<sp/>&apos;<sp/>and<sp/>&apos;+&apos;<sp/>applies<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>space_for_positive<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="619"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">:<sp/>alternate_form<sp/>=<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>&apos;0&apos;<sp/>and<sp/>&apos;-&apos;<sp/>flags<sp/>both<sp/>appear,<sp/>the<sp/>&apos;0&apos;<sp/>flag<sp/>should<sp/>be<sp/>ignored.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parse<sp/>field<sp/>width<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;<sp/>j<sp/>=<sp/>va_arg(ap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;=<sp/>0)<sp/>min_field_width<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>min_field_width<sp/>=<sp/>-j;<sp/>justify_left<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/d7f/snprintf_8c_1a80e33e966a7ec3facaf0b2b4afaf5be5" kindref="member">isdigit</ref>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(*p)))<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size_t<sp/>could<sp/>be<sp/>wider<sp/>than<sp/>unsigned<sp/>int;</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make<sp/>sure<sp/>we<sp/>treat<sp/>argument<sp/>like<sp/>common<sp/>implementations<sp/>do<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uj<sp/>=<sp/>*p++<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="d2/d7f/snprintf_8c_1a80e33e966a7ec3facaf0b2b4afaf5be5" kindref="member">isdigit</ref>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(*p)))<sp/>uj<sp/>=<sp/>10*uj<sp/>+<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)(*p++<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_field_width<sp/>=<sp/>uj;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parse<sp/>precision<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;<sp/>precision_specified<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>va_arg(ap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;=<sp/>0)<sp/>precision<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision_specified<sp/>=<sp/>0;<sp/>precision<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTE:</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Solaris<sp/>2.6<sp/>man<sp/>page<sp/>claims<sp/>that<sp/>in<sp/>this<sp/>case<sp/>the<sp/>precision</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>should<sp/>be<sp/>set<sp/>to<sp/>0.<sp/><sp/>Digital<sp/>Unix<sp/>4.0,<sp/>HPUX<sp/>10<sp/>and<sp/>BSD<sp/>man<sp/>page</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>claim<sp/>that<sp/>this<sp/>case<sp/>should<sp/>be<sp/>treated<sp/>as<sp/>unspecified<sp/>precision,</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>which<sp/>is<sp/>what<sp/>we<sp/>do<sp/>here.</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/d7f/snprintf_8c_1a80e33e966a7ec3facaf0b2b4afaf5be5" kindref="member">isdigit</ref>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(*p)))<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size_t<sp/>could<sp/>be<sp/>wider<sp/>than<sp/>unsigned<sp/>int;</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make<sp/>sure<sp/>we<sp/>treat<sp/>argument<sp/>like<sp/>common<sp/>implementations<sp/>do<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uj<sp/>=<sp/>*p++<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="d2/d7f/snprintf_8c_1a80e33e966a7ec3facaf0b2b4afaf5be5" kindref="member">isdigit</ref>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(*p)))<sp/>uj<sp/>=<sp/>10*uj<sp/>+<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)(*p++<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision<sp/>=<sp/>uj;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parse<sp/>&apos;h&apos;,<sp/>&apos;l&apos;<sp/>and<sp/>&apos;ll&apos;<sp/>length<sp/>modifiers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal"><sp/>||<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length_modifier<sp/>=<sp/>*p;<sp/>p++;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_modifier<sp/>==<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>double<sp/>l<sp/>=<sp/>long<sp/>long<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SNPRINTF_LONGLONG_SUPPORT</highlight></codeline>
<codeline lineno="669"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length_modifier<sp/>=<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>double<sp/>l<sp/>encoded<sp/>as<sp/>&apos;2&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="671"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length_modifier<sp/>=<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>treat<sp/>it<sp/>as<sp/>a<sp/>single<sp/>&apos;l&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="673"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt_spec<sp/>=<sp/>*p;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>common<sp/>synonyms:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(fmt_spec)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">:<sp/>fmt_spec<sp/>=<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">:<sp/>fmt_spec<sp/>=<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">;<sp/>length_modifier<sp/>=<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;U&apos;</highlight><highlight class="normal">:<sp/>fmt_spec<sp/>=<sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">;<sp/>length_modifier<sp/>=<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;O&apos;</highlight><highlight class="normal">:<sp/>fmt_spec<sp/>=<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">;<sp/>length_modifier<sp/>=<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>parameter<sp/>value,<sp/>do<sp/>initial<sp/>processing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(fmt_spec)<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">/*<sp/>%<sp/>behaves<sp/>similar<sp/>to<sp/>&apos;s&apos;<sp/>regarding<sp/>flags<sp/>and<sp/>field<sp/>widths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">/*<sp/>c<sp/>behaves<sp/>similar<sp/>to<sp/>&apos;s&apos;<sp/>regarding<sp/>flags<sp/>and<sp/>field<sp/>widths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length_modifier<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wint_t<sp/>and<sp/>wchar_t<sp/>not<sp/>supported<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>result<sp/>of<sp/>zero<sp/>padding<sp/>flag<sp/>with<sp/>non-numeric<sp/>conversion<sp/>specifier*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>undefined.<sp/>Solaris<sp/>and<sp/>HPUX<sp/>10<sp/>does<sp/>zero<sp/>padding<sp/>in<sp/>this<sp/>case,<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Digital<sp/>Unix<sp/>and<sp/>Linux<sp/>does<sp/>not.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(SOLARIS_COMPATIBLE)<sp/>&amp;&amp;<sp/>!defined(HPUX_COMPATIBLE)</highlight></codeline>
<codeline lineno="695"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_padding<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>turn<sp/>zero<sp/>padding<sp/>off<sp/>for<sp/>string<sp/>conversions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="697"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_arg_l<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(fmt_spec)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_arg<sp/>=<sp/>p;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>va_arg(ap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uchar_arg<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>j;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>standard<sp/>demands<sp/>unsigned<sp/>char<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_arg<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>&amp;uchar_arg;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_arg<sp/>=<sp/>va_arg(ap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str_arg)<sp/>str_arg_l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>not<sp/>to<sp/>address<sp/>string<sp/>beyond<sp/>the<sp/>specified<sp/>precision<sp/>!!!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!precision_specified)<sp/>str_arg_l<sp/>=<sp/>strlen(str_arg);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>truncate<sp/>string<sp/>if<sp/>necessary<sp/>as<sp/>requested<sp/>by<sp/>precision<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>==<sp/>0)<sp/>str_arg_l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>memchr<sp/>on<sp/>HP<sp/>does<sp/>not<sp/>like<sp/>n<sp/>&gt;<sp/>2^31<sp/><sp/>!!!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*q<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(memchr(str_arg,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision<sp/>&lt;=<sp/>0x7fffffff<sp/>?<sp/>precision<sp/>:<sp/>0x7fffffff));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_arg_l<sp/>=<sp/>!q<sp/>?<sp/>precision<sp/>:<sp/>(q-str_arg);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>the<sp/>u,<sp/>o,<sp/>x,<sp/>X<sp/>and<sp/>p<sp/>conversion<sp/>specifiers<sp/>imply</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>value<sp/>is<sp/>unsigned;<sp/><sp/>d<sp/>implies<sp/>a<sp/>signed<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_sign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>0<sp/>if<sp/>numeric<sp/>argument<sp/>is<sp/>zero<sp/>(or<sp/>if<sp/>pointer<sp/>is<sp/>NULL<sp/>for<sp/>&apos;p&apos;),</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+1<sp/>if<sp/>greater<sp/>than<sp/>zero<sp/>(or<sp/>nonzero<sp/>for<sp/>unsigned<sp/>arguments),</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1<sp/>if<sp/>negative<sp/>(unsigned<sp/>argument<sp/>is<sp/>never<sp/>negative)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_arg<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uint_arg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>only<sp/>defined<sp/>for<sp/>length<sp/>modifier<sp/>h,<sp/>or<sp/>for<sp/>no<sp/>length<sp/>modifiers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>long_arg<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ulong_arg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>only<sp/>defined<sp/>for<sp/>length<sp/>modifier<sp/>l<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr_arg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>argument<sp/>value<sp/>-only<sp/>defined<sp/>for<sp/>p<sp/>conversion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SNPRINTF_LONGLONG_SUPPORT</highlight></codeline>
<codeline lineno="743"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>long_long_arg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ulong_long_arg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>only<sp/>defined<sp/>for<sp/>length<sp/>modifier<sp/>ll<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="747"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_spec<sp/>==<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HPUX<sp/>10:<sp/>An<sp/>l,<sp/>h,<sp/>ll<sp/>or<sp/>L<sp/>before<sp/>any<sp/>other<sp/>conversion<sp/>character</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>(other<sp/>than<sp/>d,<sp/>i,<sp/>u,<sp/>o,<sp/>x,<sp/>or<sp/>X)<sp/>is<sp/>ignored.</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Digital<sp/>Unix:</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>not<sp/>specified,<sp/>but<sp/>seems<sp/>to<sp/>behave<sp/>as<sp/>HPUX<sp/>does.</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Solaris:<sp/>If<sp/>an<sp/>h,<sp/>l,<sp/>or<sp/>L<sp/>appears<sp/>before<sp/>any<sp/>other<sp/>conversion</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>specifier<sp/>(other<sp/>than<sp/>d,<sp/>i,<sp/>u,<sp/>o,<sp/>x,<sp/>or<sp/>X),<sp/>the<sp/>behavior</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>is<sp/>undefined.<sp/>(Actually<sp/>%hp<sp/>converts<sp/>only<sp/>16-bits<sp/>of<sp/>address</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>and<sp/>%llp<sp/>treats<sp/>address<sp/>as<sp/>64-bit<sp/>data<sp/>which<sp/>is<sp/>incompatible</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>with<sp/>(void<sp/>*)<sp/>argument<sp/>on<sp/>a<sp/>32-bit<sp/>system).</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SOLARIS_COMPATIBLE</highlight></codeline>
<codeline lineno="759"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>SOLARIS_BUG_COMPATIBLE</highlight></codeline>
<codeline lineno="760"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>keep<sp/>length<sp/>modifiers<sp/>even<sp/>if<sp/>it<sp/>represents<sp/>&apos;ll&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight></codeline>
<codeline lineno="762"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_modifier<sp/>==<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">)<sp/>length_modifier<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="764"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="765"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length_modifier<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="767"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_arg<sp/>=<sp/>va_arg(ap,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr_arg<sp/>!=<sp/>NULL)<sp/>arg_sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_spec<sp/>==<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>signed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(length_modifier)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>non-portable<sp/>to<sp/>specify<sp/>a<sp/>second<sp/>argument<sp/>of<sp/>char<sp/>or<sp/>short</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>va_arg,<sp/>because<sp/>arguments<sp/>seen<sp/>by<sp/>the<sp/>called<sp/>function</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>are<sp/>not<sp/>char<sp/>or<sp/>short.<sp/><sp/>C<sp/>converts<sp/>char<sp/>and<sp/>short<sp/>arguments</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>int<sp/>before<sp/>passing<sp/>them<sp/>to<sp/>a<sp/>function.</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_arg<sp/>=<sp/>va_arg(ap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(int_arg<sp/>&gt;<sp/>0)<sp/>arg_sign<sp/>=<sp/><sp/>1;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(int_arg<sp/>&lt;<sp/>0)<sp/>arg_sign<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long_arg<sp/>=<sp/>va_arg(ap,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(long_arg<sp/>&gt;<sp/>0)<sp/>arg_sign<sp/>=<sp/><sp/>1;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(long_arg<sp/>&lt;<sp/>0)<sp/>arg_sign<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SNPRINTF_LONGLONG_SUPPORT</highlight></codeline>
<codeline lineno="788"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long_long_arg<sp/>=<sp/>va_arg(ap,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(long_long_arg<sp/>&gt;<sp/>0)<sp/>arg_sign<sp/>=<sp/><sp/>1;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(long_long_arg<sp/>&lt;<sp/>0)<sp/>arg_sign<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="794"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>unsigned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(length_modifier)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_arg<sp/>=<sp/>va_arg(ap,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uint_arg)<sp/>arg_sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ulong_arg<sp/>=<sp/>va_arg(ap,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ulong_arg)<sp/>arg_sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SNPRINTF_LONGLONG_SUPPORT</highlight></codeline>
<codeline lineno="807"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ulong_long_arg<sp/>=<sp/>va_arg(ap,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ulong_long_arg)<sp/>arg_sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="812"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_arg<sp/>=<sp/>tmp;<sp/>str_arg_l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTE:</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>For<sp/>d,<sp/>i,<sp/>u,<sp/>o,<sp/>x,<sp/>and<sp/>X<sp/>conversions,<sp/>if<sp/>precision<sp/>is<sp/>specified,</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>the<sp/>&apos;0&apos;<sp/>flag<sp/>should<sp/>be<sp/>ignored.<sp/>This<sp/>is<sp/>so<sp/>with<sp/>Solaris<sp/>2.6,</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Digital<sp/>UNIX<sp/>4.0,<sp/>HPUX<sp/>10,<sp/>Linux,<sp/>FreeBSD,<sp/>NetBSD;<sp/>but<sp/>not<sp/>with<sp/>Perl.</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PERL_COMPATIBLE</highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision_specified)<sp/>zero_padding<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="823"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_spec<sp/>==<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force_sign<sp/>&amp;&amp;<sp/>arg_sign<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[str_arg_l++]<sp/>=<sp/>space_for_positive<sp/>?<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>leave<sp/>negative<sp/>numbers<sp/>for<sp/>sprintf<sp/>to<sp/>handle,</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>avoid<sp/>handling<sp/>tricky<sp/>cases<sp/>like<sp/>(short<sp/>int)(-32768)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LINUX_COMPATIBLE</highlight></codeline>
<codeline lineno="829"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_spec<sp/>==<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>force_sign<sp/>&amp;&amp;<sp/>arg_sign<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[str_arg_l++]<sp/>=<sp/>space_for_positive<sp/>?<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="832"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alternate_form)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_sign<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>(fmt_spec<sp/>==<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal"><sp/>||<sp/>fmt_spec<sp/>==<sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">)<sp/>)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>tmp[str_arg_l++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>tmp[str_arg_l++]<sp/>=<sp/>fmt_spec;<sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>alternate<sp/>form<sp/>should<sp/>have<sp/>no<sp/>effect<sp/>for<sp/>p<sp/>conversion,<sp/>but<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HPUX_COMPATIBLE</highlight></codeline>
<codeline lineno="837"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_spec<sp/>==<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HPUX<sp/>10:<sp/>for<sp/>an<sp/>alternate<sp/>form<sp/>of<sp/>p<sp/>conversion,</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>nonzero<sp/>result<sp/>is<sp/>prefixed<sp/>by<sp/>0x.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal">#ifndef<sp/>HPUX_BUG_COMPATIBLE</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Actually<sp/>it<sp/>uses<sp/>0x<sp/>prefix<sp/>even<sp/>for<sp/>a<sp/>zero<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>arg_sign<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="843"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{<sp/>tmp[str_arg_l++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>tmp[str_arg_l++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="846"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_padding_insertion_ind<sp/>=<sp/>str_arg_l;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!precision_specified)<sp/>precision<sp/>=<sp/>1;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>default<sp/>precision<sp/>is<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>arg_sign<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="850"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(HPUX_BUG_COMPATIBLE)<sp/>||<sp/>defined(LINUX_COMPATIBLE)</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>fmt_spec<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HPUX<sp/>10<sp/>man<sp/>page<sp/>claims:<sp/>With<sp/>conversion<sp/>character<sp/>p<sp/>the<sp/>result<sp/>of</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>converting<sp/>a<sp/>zero<sp/>value<sp/>with<sp/>a<sp/>precision<sp/>of<sp/>zero<sp/>is<sp/>a<sp/>null<sp/>string.</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Actually<sp/>HP<sp/>returns<sp/>all<sp/>zeroes,<sp/>and<sp/>Linux<sp/>returns<sp/>&quot;(nil)&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>converted<sp/>to<sp/>null<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>When<sp/>zero<sp/>value<sp/>is<sp/>formatted<sp/>with<sp/>an<sp/>explicit<sp/>precision<sp/>0,</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>resulting<sp/>formatted<sp/>string<sp/>is<sp/>empty<sp/>(d,<sp/>i,<sp/>u,<sp/>o,<sp/>x,<sp/>X,<sp/>p).<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>f[5];<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f_l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[f_l++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>construct<sp/>a<sp/>simple<sp/>format<sp/>string<sp/>for<sp/>sprintf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!length_modifier)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_modifier==</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">)<sp/>{<sp/>f[f_l++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">;<sp/>f[f_l++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>f[f_l++]<sp/>=<sp/>length_modifier;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[f_l++]<sp/>=<sp/>fmt_spec;<sp/>f[f_l++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_spec<sp/>==<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)<sp/>str_arg_l<sp/>+=<sp/>sprintf(tmp+str_arg_l,<sp/>f,<sp/>ptr_arg);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_spec<sp/>==<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>signed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(length_modifier)<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:<sp/>str_arg_l+=sprintf(tmp+str_arg_l,<sp/>f,<sp/>int_arg);<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:<sp/>str_arg_l+=sprintf(tmp+str_arg_l,<sp/>f,<sp/>long_arg);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SNPRINTF_LONGLONG_SUPPORT</highlight></codeline>
<codeline lineno="874"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">:<sp/>str_arg_l+=sprintf(tmp+str_arg_l,f,long_long_arg);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="876"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>unsigned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(length_modifier)<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:<sp/>str_arg_l+=sprintf(tmp+str_arg_l,<sp/>f,<sp/>uint_arg);<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:<sp/>str_arg_l+=sprintf(tmp+str_arg_l,<sp/>f,<sp/>ulong_arg);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SNPRINTF_LONGLONG_SUPPORT</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">:<sp/>str_arg_l+=sprintf(tmp+str_arg_l,f,ulong_long_arg);</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="885"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>include<sp/>the<sp/>optional<sp/>minus<sp/>sign<sp/>and<sp/>possible<sp/>&quot;0x&quot;</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>region<sp/>before<sp/>the<sp/>zero<sp/>padding<sp/>insertion<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zero_padding_insertion_ind<sp/>&lt;<sp/>str_arg_l<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[zero_padding_insertion_ind]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_padding_insertion_ind++;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zero_padding_insertion_ind+1<sp/>&lt;<sp/>str_arg_l<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[zero_padding_insertion_ind]<sp/><sp/><sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tmp[zero_padding_insertion_ind+1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[zero_padding_insertion_ind+1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_padding_insertion_ind<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_of_digits<sp/>=<sp/>str_arg_l<sp/>-<sp/>zero_padding_insertion_ind;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alternate_form<sp/>&amp;&amp;<sp/>fmt_spec<sp/>==<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal">#ifdef<sp/>HPUX_COMPATIBLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(&quot;%#.o&quot;,0)<sp/>-&gt;<sp/>&quot;&quot;<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(str_arg_l<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="904"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="905"><highlight class="normal">#ifdef<sp/>DIGITAL_UNIX_BUG_COMPATIBLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(&quot;%#o&quot;,0)<sp/>-&gt;<sp/>&quot;00&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unless<sp/>zero<sp/>is<sp/>already<sp/>the<sp/>first<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!(zero_padding_insertion_ind<sp/>&lt;<sp/>str_arg_l</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>tmp[zero_padding_insertion_ind]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="910"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>assure<sp/>leading<sp/>zero<sp/>for<sp/>alternate-form<sp/>octal<sp/>numbers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!precision_specified<sp/>||<sp/>precision<sp/>&lt;<sp/>num_of_digits+1)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>precision<sp/>is<sp/>increased<sp/>to<sp/>force<sp/>the<sp/>first<sp/>character<sp/>to<sp/>be<sp/>zero,</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>if<sp/>a<sp/>zero<sp/>value<sp/>is<sp/>formatted<sp/>with<sp/>an<sp/>explicit<sp/>precision</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision<sp/>=<sp/>num_of_digits+1;<sp/>precision_specified<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>zero<sp/>padding<sp/>to<sp/>specified<sp/>precision?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_of_digits<sp/>&lt;<sp/>precision)<sp/></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_of_zeros_to_pad<sp/>=<sp/>precision<sp/>-<sp/>num_of_digits;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>zero<sp/>padding<sp/>to<sp/>specified<sp/>minimal<sp/>field<sp/>width?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!justify_left<sp/>&amp;&amp;<sp/>zero_padding)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>min_field_width<sp/>-<sp/>(str_arg_l+number_of_zeros_to_pad);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>number_of_zeros_to_pad<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">/*<sp/>unrecognized<sp/>conversion<sp/>specifier,<sp/>keep<sp/>format<sp/>string<sp/>as-is*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_padding<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>turn<sp/>zero<sp/>padding<sp/>off<sp/>for<sp/>non-numeric<sp/>convers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DIGITAL_UNIX_COMPATIBLE</highlight></codeline>
<codeline lineno="933"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>justify_left<sp/>=<sp/>1;<sp/>min_field_width<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reset<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="935"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(PERL_COMPATIBLE)<sp/>||<sp/>defined(LINUX_COMPATIBLE)</highlight></codeline>
<codeline lineno="936"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>keep<sp/>the<sp/>entire<sp/>format<sp/>string<sp/>unchanged<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_arg<sp/>=<sp/>starting_p;<sp/>str_arg_l<sp/>=<sp/>p<sp/>-<sp/>starting_p;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>well,<sp/>not<sp/>exactly<sp/>so<sp/>for<sp/>Linux,<sp/>which<sp/>does<sp/>something<sp/>inbetween,</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>I<sp/>don&apos;t<sp/>feel<sp/>an<sp/>urge<sp/>to<sp/>imitate<sp/>it:<sp/>&quot;%+++++hy&quot;<sp/>-&gt;<sp/>&quot;%+y&quot;<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="941"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>discard<sp/>the<sp/>unrecognized<sp/>conversion,<sp/>just<sp/>keep<sp/>*</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>unrecognized<sp/>conversion<sp/>character<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_arg<sp/>=<sp/>p;<sp/>str_arg_l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="945"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p)<sp/>str_arg_l++;<sp/><sp/></highlight><highlight class="comment">/*<sp/>include<sp/>invalid<sp/>conversion<sp/>specifier<sp/>unchanged</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>at<sp/>end-of-string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p)<sp/>p++;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>step<sp/>over<sp/>the<sp/>just<sp/>processed<sp/>conversion<sp/>specifier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insert<sp/>padding<sp/>to<sp/>the<sp/>left<sp/>as<sp/>requested<sp/>by<sp/>min_field_width;</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>does<sp/>not<sp/>include<sp/>the<sp/>zero<sp/>padding<sp/>in<sp/>case<sp/>of<sp/>numerical<sp/>conversions*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!justify_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>left<sp/>padding<sp/>with<sp/>blank<sp/>or<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>min_field_width<sp/>-<sp/>(str_arg_l+number_of_zeros_to_pad);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_l<sp/>&lt;<sp/>str_m)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>avail<sp/>=<sp/>str_m-str_l;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d7f/snprintf_8c_1ad448207baaebdf239f9a6eefc806201e" kindref="member">fast_memset</ref>(str+str_l,<sp/>(zero_padding?</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">),<sp/>(n&gt;avail?avail:n));</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_l<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>zero<sp/>padding<sp/>as<sp/>requested<sp/>by<sp/>the<sp/>precision<sp/>or<sp/>by<sp/>the<sp/>minimal<sp/>field<sp/>width</highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>for<sp/>numeric<sp/>conversions<sp/>required?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number_of_zeros_to_pad<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>will<sp/>not<sp/>copy<sp/>first<sp/>part<sp/>of<sp/>numeric<sp/>right<sp/>now,<sp/>*</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>force<sp/>it<sp/>to<sp/>be<sp/>copied<sp/>later<sp/>in<sp/>its<sp/>entirety<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_padding_insertion_ind<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insert<sp/>first<sp/>part<sp/>of<sp/>numerics<sp/>(sign<sp/>or<sp/>&apos;0x&apos;)<sp/>before<sp/>zero<sp/>padding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>zero_padding_insertion_ind;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_l<sp/>&lt;<sp/>str_m)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>avail<sp/>=<sp/>str_m-str_l;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d7f/snprintf_8c_1abdd8c3490d94c83fb3866e0e9139db38" kindref="member">fast_memcpy</ref>(str+str_l,<sp/>str_arg,<sp/>(n&gt;avail?avail:n));</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_l<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insert<sp/>zero<sp/>padding<sp/>as<sp/>requested<sp/>by<sp/>the<sp/>precision<sp/>or<sp/>min<sp/>field<sp/>width<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>number_of_zeros_to_pad;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_l<sp/>&lt;<sp/>str_m)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>avail<sp/>=<sp/>str_m-str_l;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d7f/snprintf_8c_1ad448207baaebdf239f9a6eefc806201e" kindref="member">fast_memset</ref>(str+str_l,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/>(n&gt;avail?avail:n));</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_l<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insert<sp/>formatted<sp/>string</highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>(or<sp/>as-is<sp/>conversion<sp/>specifier<sp/>for<sp/>unknown<sp/>conversions)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>str_arg_l<sp/>-<sp/>zero_padding_insertion_ind;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_l<sp/>&lt;<sp/>str_m)<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>avail<sp/>=<sp/>str_m-str_l;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d7f/snprintf_8c_1abdd8c3490d94c83fb3866e0e9139db38" kindref="member">fast_memcpy</ref>(str+str_l,<sp/>str_arg+zero_padding_insertion_ind,</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(n&gt;avail?avail:n));</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_l<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insert<sp/>right<sp/>padding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(justify_left)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>right<sp/>blank<sp/>padding<sp/>to<sp/>the<sp/>field<sp/>width<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>min_field_width<sp/>-<sp/>(str_arg_l+number_of_zeros_to_pad);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_l<sp/>&lt;<sp/>str_m)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>avail<sp/>=<sp/>str_m-str_l;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d7f/snprintf_8c_1ad448207baaebdf239f9a6eefc806201e" kindref="member">fast_memset</ref>(str+str_l,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>(n&gt;avail?avail:n));</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_l<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NEED_SNPRINTF_ONLY)</highlight></codeline>
<codeline lineno="1014"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1016"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_m<sp/>&gt;<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>the<sp/>string<sp/>is<sp/>null-terminated</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>even<sp/>at<sp/>the<sp/>expense<sp/>of<sp/>overwriting<sp/>the<sp/>last<sp/>character</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(shouldn&apos;t<sp/>happen,<sp/>but<sp/>just<sp/>in<sp/>case)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>str[str_l<sp/>&lt;=<sp/>str_m-1<sp/>?<sp/>str_l<sp/>:<sp/>str_m-1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>number<sp/>of<sp/>characters<sp/>formatted<sp/>(excluding<sp/>trailing<sp/>null</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"><sp/><sp/><sp/>*<sp/>character),<sp/>that<sp/>is,<sp/>the<sp/>number<sp/>of<sp/>characters<sp/>that<sp/>would<sp/>have<sp/>been</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/><sp/><sp/>*<sp/>written<sp/>to<sp/>the<sp/>buffer<sp/>if<sp/>it<sp/>were<sp/>large<sp/>enough.</highlight></codeline>
<codeline lineno="1024"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>value<sp/>of<sp/>str_l<sp/>should<sp/>be<sp/>returned,<sp/>but<sp/>str_l<sp/>is<sp/>of<sp/>unsigned<sp/>type</highlight></codeline>
<codeline lineno="1026"><highlight class="comment"><sp/><sp/><sp/>*<sp/>size_t,<sp/>and<sp/>snprintf<sp/>is<sp/>int,<sp/>possibly<sp/>leading<sp/>to<sp/>an<sp/>undetected</highlight></codeline>
<codeline lineno="1027"><highlight class="comment"><sp/><sp/><sp/>*<sp/>integer<sp/>overflow,<sp/>resulting<sp/>in<sp/>a<sp/>negative<sp/>return<sp/>value,<sp/>which<sp/>is<sp/>illegal.</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Both<sp/>XSH5<sp/>and<sp/>ISO<sp/>C99<sp/>(at<sp/>least<sp/>the<sp/>draft)<sp/>are<sp/>silent<sp/>on<sp/>this<sp/>issue.</highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Should<sp/>errno<sp/>be<sp/>set<sp/>to<sp/>EOVERFLOW<sp/>and<sp/>EOF<sp/>returned<sp/>in<sp/>this<sp/>case???</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>str_l;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/tango/workspace/cppTango/src/log4tango/snprintf.c"/>
  </compounddef>
</doxygen>
